# docker-compose.yml
version: "3.8"

services:
  grafana:
    image: grafana/grafana:7.3.0
    ports:
      - 3000:3000
    depends_on:
      - prometheus

  # Suggested dashboard for the below: 10566
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - 8090:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - php

  nginx:
    container_name: nginx
    build: ./docker/nginx
    command: nginx -g "daemon off;"
    links:
      - php
      - redis
    ports:
      - "80:80"
    #      - "443:443"
    volumes:
      #      - ./conf/nginx/templates:/etc/nginx/templates
      - errors_base:/var/www/html/errors
      - logs_nginx:/var/log/nginx
      - src_base:/var/www/html
    networks:
      dev_stack:
        aliases:
          - www.technoboggle.com
          - technoboggle.com
          - localhost
  #    environment:
  #      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
  #      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
  #      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
  #      - NGINX_PORT=80
  #      - NGINX_SSL_PORT=443
  #      - NGINX_HOST0=sb
  #      - NGINX_HOST1=sb_1
  #      - NGINX_HOST2=sb_2

  php:
    container_name: php
    hostname: php
    build: ./docker/php
    links:
      - redis
      - mysql
      - mongo
    ports:
      - "9000:9000"
    networks:
      dev_stack:
    volumes:
      - src_base:/var/www/html
      - ./logs/nginx:/var/log/nginx
    working_dir: /var/www/html
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      XDEBUG_MODE: develop,debug
      XDEBUG_CONFIG: client_host=host.docker.internal

  mysql:
    image: mysql:8.0.27
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 'SdkW7BkXsKY6i82UuQ34'
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: 'SdkW7BkXsKY6i82UuQ34'
    ports:
      - "3306:3306"
    networks:
      dev_stack:
    volumes:
      - data_mysql:/var/lib/mysql
  #    secrets:
  #      - mysql_root_password
  #      - db_password

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - 8085:80
    networks:
      dev_stack:


  composer:
    container_name: composer
    image: composer:latest
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    networks:
      dev_stack:


  redis:
    hostname: redis
    container_name: redis
    image: redis:4-alpine
    volumes:
      - ./conf/redis:/etc/redis
      - data_redis:/data
    deploy:
      resources:
        limits:
          memory: 100M
    #privileged: true
    ports:
      - '6579:6579'
    networks:
      dev_stack:


  mongo:
    image: mongo:5.0
    container_name: mongo
    hostname: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=SdkW7BkXsKY6i82UuQ34
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - data_mongo_db:/data/db
      - data_mongo_dev:/Databases/dev.archive
      - data_mongo_production:/Databases/production
    networks:
      dev_stack:
    command: [ --auth ]

  mongo-express:
    image: mongo-express:0.54.0 # Only this version is currently connecting
    container_name: mexpress
    hostname: mexpress
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=SdkW7BkXsKY6i82UuQ34
      - ME_CONFIG_MONGODB_URL=mongodb://root:SdkW7BkXsKY6i82UuQ34@mongo:27017/?authSource=admin
      - ME_CONFIG_BASICAUTH_USERNAME=mexpress
      - ME_CONFIG_BASICAUTH_PASSWORD=mexpress
    links:
      - mongo
    depends_on:
      - mongo
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      dev_stack:


networks:
  dev_stack:

    #secrets:
    #  db_password:
    #    file: db_password.txt
    #  mysql_root_password:
    #    file: mysql_root_password.txt


volumes:
  ## First some NFS examples
  #nfs-conf:
  #  driver: local
  #  driver_opts:
  #    type: nfs
  #    o: addr=192.168.1.10,rw,nolock,soft,resvport,nfsvers=4
  #    device: ":/nfs/exim/conf/exim-001/"

  #nfs-spool:
  #  driver: local
  #  driver_opts:
  #    type: nfs
  #    o: addr=192.168.1.10,rw,nolock,soft,resvport,nfsvers=4
  #    device: ":/nfs/exim/spool/exim-001/"

  #nfs-storage:
  #  driver: local
  #  driver_opts:
  #    type: nfs
  #    o: addr=192.168.1.10,rw,nolock,soft,resvport,nfsvers=4
  #    device: ":/nfs/storage/"

  #nfs-log:
  #  driver: local
  #  driver_opts:
  #    type: nfs
  #    o: addr=192.168.1.10,rw,nolock,soft,resvport,nfsvers=4
  #    device: ":/nfs/exim/log/exim-001/"

  # Now some local file system examples
  src_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/src"
      o: bind

  logs_nginx:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/logs/nginx"
      o: bind

  errors_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/errors"
      o: bind

  data_mysql:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/database/mysql"
      o: bind

  data_redis:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/database/redis"
      o: bind

  data_mongo_db:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/database/mongodb/db"
      o: bind

  data_mongo_dev:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/database/mongodb/dev.archive"
      o: bind

  data_mongo_production:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/database/mongodb/production"
      o: bind
